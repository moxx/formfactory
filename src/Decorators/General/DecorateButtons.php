<?php

namespace Nicat\FormFactory\Decorators\General;

use Nicat\FormFactory\Components\FormControls\Button;
use Nicat\FormFactory\Utilities\ComponentLists;
use Nicat\HtmlFactory\Decorators\Abstracts\Decorator;

/**
 * Apply various decorations to FormFactory-fields.
 *
 * Class AutoGenerateButtonTexts
 * @package Nicat\FormFactory\Decorators\General
 */
class DecorateButtons extends Decorator
{

    /**
     * The element to be decorated.
     *
     * @var Button
     */
    protected $element;

    /**
     * Returns the group-ID of this decorator.
     *
     * Returning null means this decorator will always be applied.
     *
     * @return string|null
     */
    public static function getGroupId()
    {
        return null;
    }

    /**
     * Returns an array of class-names of elements, that should be decorated by this decorator.
     *
     * @return string[]
     */
    public static function getSupportedElements(): array
    {
        return ComponentLists::buttons();
    }

    /**
     * Perform decorations on $this->element.
     */
    public function decorate()
    {
        // Automatically generate a meaningful id for fields without a manually set id.
        //$this->autoGenerateID();

        // Automatically generate the button-text for button-elements without a manually set content using auto-translation.
        //$this->autoGenerateButtonText();
    }

    /**
     * Automatically generates a meaningful id for buttons without a manually set id.
     */
    protected function autoGenerateID()
    {
        // If the element already has an id, we leave it be.
        if ($this->element->attributes->isSet('id')) {
            return;
        }

        // Auto-generated IDs always start with formID followed by an underscore and an appropriate suffix.
        $fieldId = '';
        if ($this->element->hasFormInstance()) {
            $fieldId = $this->element->getFormInstance()->getId() . '_';
        }
        $fieldId .= $this->getIdSuffix();

        // Set the id.
        $this->element->id($fieldId);
    }

    /**
     * Returns an appropriate ID-suffix for autogenerated button-IDs.
     *
     * @return string
     */
    protected function getIdSuffix(): string
    {

        // If the "name"-attribute is set, we use that as suffix.
        if ($this->element->attributes->isSet('name')) {
            return $this->element->attributes->name;
        }

        // If the button has a "context", we use that as suffix.
        if ($this->element->hasContext()) {
            return $this->element->getContext();
        }

        // As default-suffix, we use the string 'button'.
        return 'button';
    }

    /**
     * Automatically generates the button-text for button-elements without a manually set content using auto-translation.
     */
    private function autoGenerateButtonText()
    {
        if (!$this->element->content->hasContent()) {
            $this->element->content(
                $this->element->performAutoTranslation(ucwords($this->element->attributes->name))
            );
        }
    }

}